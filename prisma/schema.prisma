// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  email_address String?
  first_name    String?
  last_name     String?
  image_url     String?
  banner_id     String?
  banner_url    String?
  username      String?   @unique
  posts         Post[]
  like          Like[]
  comment       Comment[]
  trend         Trend[]
  followers     Follow[]  @relation("Following")
  following     Follow[]  @relation("Follower")
}

model Post {
  id        Int       @id @default(autoincrement())
  postText  String?
  media     String?
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  cld_id    String?
  createdAt DateTime  @default(now())
  likes     Like[]
  comments  Comment[]
  trends    Trend[]
}

model Like {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  comment   String?
  createdAt DateTime @default(now())
}

model Trend {
  id     Int     @id @default(autoincrement())
  name   String
  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())
}
